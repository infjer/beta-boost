<template>
    <el-container style="height: 100%;">
        <el-aside width="600px" style="position: relative;">
            <div id="plumb">
                <!-- <div id="step0" class="item" style="left: 270px; top: 20px;">A</div>
                <div id="step1" class="item" style="left: 270px; top: 140px;">B</div>
                <div id="step2" class="item" style="left: 150px; top: 140px;">C</div>
                <div id="step3" class="item" style="left: 390px; top: 140px;">D</div>
                <div id="step4" class="item" style="left: 390px; top: 280px;">E</div>
                <div id="step5" class="item" style="left: 510px; top: 210px;">F</div>
                <div id="step6" class="item" style="left: 390px; top: 420px;">G</div>
                <div id="step7" class="item" style="left: 150px; top: 420px;">H</div>
                <div id="step8" class="item" style="left: 270px; top: 560px;">I</div>
                <div id="step9" class="item" style="left: 270px; top: 680px;">J</div> -->
                <div class="item" id="step0">0</div>
                <div class="item" id="step1">1</div>
                <div class="item" id="step2">2</div>
                <div class="item" id="step3">3</div>
                <div class="item" id="step4">4</div>
                <div class="item" id="step5">5</div>
                <div class="item" id="step6">6</div>
                <div class="item" id="step7">7</div>
                <div class="item" id="step8">8</div>
                <div class="item" id="step9">9</div>
                <div id="drag1" class="item" style="left: 0px; top: 0px;">drag1</div>
                <div id="drag2" class="item" style="left: 0px; top: 100px;">drag2-limit</div>
            </div>
        </el-aside>
        <el-main style="padding: 0; border-left: 1px solid #ccc;">
            <div style="height: 30%; border-bottom: 1px solid #ccc;"></div>
            <div style="height: 30%; border-bottom: 1px solid #ccc;" id="chart"></div>
            <div style="height: 40%"></div>
        </el-main>
    </el-container>
</template>

<script>
    import $ from 'jquery';
    import jsplumb from 'jsplumb';
    import uuid from 'uuid';
    import highcharts from 'highcharts/highstock';
    import axios from 'axios';
    import query from './scenario5.js';
    import moment from 'moment';
    require('../lib/jsplumbtoolkit');


    export default {
        data() {
            return {
                ids: [],
                idsPosition: [],
                currentId: null,
            };
        },
        methods: {
            drawChart(data) {
                highcharts.chart('chart', {
                    credits: false,
                    height: '100%',
                    annotations: [
                        {
                            labelOptions: {
                                allowOverlap: true,
                                crop: true,
                            },
                        },
                    ],
                    chart: {
                        spacing: [20, 20, 20, 20],
                    },
                    title: {
                        text: null,
                    },
                    xAxis: {
                        type: 'datetime',
                        labels: {
                            formatter: function() {
                                return moment(this.value).format('YYYY-MM-DD');
                            },
                            overflow: 'justify',
                            distance: 30,
                        },
                    },
                    yAxis: {
                        title: {
                            text: null,
                        },
                    },
                    legend: {
                        enabled: false,
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'middle',
                    },
                    series: [{
                        data: data.map(i => [Date.UTC(i.date.substr(0, 4) - 0, i.date.substr(5, 2) - 1, i.date.substr(8, 2) - 0), i.net_value]),
                        states: {
                            hover: {
                                enabled: false,
                            },
                        },
                    }],
                    responsive: {
                        rules: [
                            {
                                condition: {
                                    maxWidth: 500,
                                },
                                chartOptions: {
                                    legend: {
                                        layout: 'horizontal',
                                        align: 'center',
                                        verticalAlign: 'bottom',
                                    },
                                },
                            },
                        ],
                    },
                })
            },
        },
        watch: {
            ids: function(ids) {
                this.idsPosition = ids.map(id => ({
                    width: $(id).outerWidth(),
                    height: $(id).outerHeight(),
                    offset: $(id).offset(),
                    id,
                }))
            },
            currentId: function(cId, pId) {
                if(cId !== null) {
                    $(cId).css({ background: '#ccc' });
                }
                $(pId).css({ background: '#fff' });
            }
        },
        mounted() {
            this.ids = [0,1,2,3,4,5,6,7,8,9].map(i => `#step${i}`);
            let { jsPlumb } = jsplumb;
            jsPlumb.ready(() => {
                let toolkit = jsPlumbToolkit.newInstance({
                    edges: [
                        { source: 'step0', target: 'step1',},
                    ],
                });
                let instance = toolkit.render({
                    container: 'plumb',
                    jsPlumb: {
                        PaintStyle: {
                            strokeWidth: 2,
                            stroke: 'red',
                        },
                        Connector: [ 'Flowchart', { cornerRadius: 5 } ],
                        EndpointStyle : { fill: 'transparent'  },
                        Overlays: [
                            ['Arrow', { id: 'arrow', width: 10, location: 1, }],
                        ],
                    },
                    layout: {
                        type: 'Hierarchical',
                        parameters: {
                            padding: [ 50, 50, ],
                        },
                    },
                })
                // let instance = jsPlumb.getInstance({
                //     Container: 'plumb',
                //     PaintStyle: {
                //         strokeWidth: 2,
                //         stroke: 'red',
                //     },
                //     Connector: [ 'Flowchart', { cornerRadius: 5 } ],
                //     EndpointStyle : { fill: 'transparent'  },
                //     Overlays: [
                //         ['Arrow', { id: 'arrow', width: 10, location: 1, }],
                //     ],
                // })

                // ORDER.map((item, index) => {
                //     instance.connect({
                //         source: `step${item[0]}`,
                //         target: `step${item[1]}`,
                //         detachable: false,
                //         anchor: 'AutoDefault',
                //     })
                //     // if()
                // })
/*
                {
                    instance.connect({
                        source: 'step0',
                        target: 'step1',
                        anchor: 'AutoDefault',
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step1',
                        target: 'step2',
                        anchor: 'AutoDefault',
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step1',
                        target: 'step3',
                        anchor: 'AutoDefault',
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step3',
                        target: 'step4',
                        anchor: 'AutoDefault',
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step4',
                        target: 'step5',
                        // anchor: 'AutoDefault',
                        anchors: ['Right', 'Bottom'],
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step5',
                        target: 'step3',
                        // anchor: 'AutoDefault',
                        anchors: ['Top', 'Right'],
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step4',
                        target: 'step6',
                        anchor: 'AutoDefault',
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step2',
                        target: 'step7',
                        anchor: 'AutoDefault',
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step6',
                        target: 'step8',
                        // anchor: 'AutoDefault',
                        anchors: ['Bottom', 'Top'],
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step7',
                        target: 'step8',
                        // anchor: 'AutoDefault',
                        anchors: ['Bottom', 'Top'],
                        detachable: false,
                    })
                    instance.connect({
                        source: 'step8',
                        target: 'step9',
                        anchor: 'AutoDefault',
                        detachable: false,
                    })
                }

                jsPlumb.draggable('drag1', {
                    clone: true,
                    drag: e => {
                        let target = {
                            offset: {
                                left: e.pos[0],
                                top: e.pos[1],
                            },
                            width: $(`#drag1`).outerWidth(),
                            height: $(`#drag1`).outerHeight(),
                            id: '#drag1',
                        }
                        let center = {
                            x: target.offset.left + target.width / 2,
                            y: target.offset.top + target.height / 2,
                        }
                        let isIn = false;
                        for(let i of this.idsPosition) {
                            if(center.x <= (i.offset.left + i.width)
                                && center.x >= i.offset.left
                                && center.y <= (i.offset.top + i.height)
                                && center.y >= i.offset.top) {
                                    this.currentId = i.id;
                                    isIn = true;
                                    break;
                            }
                        }
                        if(!isIn) {
                            this.currentId = null;
                        }
                    },
                    stop: e => {
                        let target = {
                            offset: e.selection[0][1],
                            width: $(`#drag1`).outerWidth(),
                            height: $(`#drag1`).outerHeight(),
                            id: '#drag1',
                        }
                        let center = {
                            x: target.offset.left + target.width / 2,
                            y: target.offset.top + target.height / 2,
                        }
                        for(let i of this.idsPosition) {
                            if(center.x <= (i.offset.left + i.width)
                                && center.x >= i.offset.left
                                && center.y <= (i.offset.top + i.height)
                                && center.y >= i.offset.top) {
                                    let _target = $(target.id).clone();
                                    let _uuid = uuid();
                                    _target.attr({ id: _uuid, }).attr('style', $(i.id).attr('style')).text(`drag1, id=${_uuid}`).css({ background: '#fff' });
                                    $('#plumb').append(_target);
                                    $(i.id).remove();
                                    this.ids.splice(this.ids.indexOf(i.id), 1);
                                    this.ids.push(`#${_uuid}`);
                                    break;
                            }
                        }
                        this.currentId = null;
                    },
                });
                jsPlumb.draggable('drag2', {
                    clone: true,
                    drag: e => {
                        let target = {
                            offset: {
                                left: e.pos[0],
                                top: e.pos[1],
                            },
                            width: $(`#drag2`).outerWidth(),
                            height: $(`#drag2`).outerHeight(),
                            id: '#drag2',
                        }
                        let center = {
                            x: target.offset.left + target.width / 2,
                            y: target.offset.top + target.height / 2,
                        }
                        let isIn = false;
                        for(let i of this.idsPosition.slice(0, 6)) {
                            if(center.x <= (i.offset.left + i.width)
                                && center.x >= i.offset.left
                                && center.y <= (i.offset.top + i.height)
                                && center.y >= i.offset.top) {
                                    this.currentId = i.id;
                                    isIn = true;
                                    break;
                            }
                        }
                        if(!isIn) {
                            this.currentId = null;
                        }
                    },
                    stop: e => {
                        let target = {
                            offset: e.selection[0][1],
                            width: $(`#drag2`).outerWidth(),
                            height: $(`#drag2`).outerHeight(),
                            id: '#drag2',
                        }
                        let center = {
                            x: target.offset.left + target.width / 2,
                            y: target.offset.top + target.height / 2,
                        }
                        for(let i of this.idsPosition.slice(0,6)) {
                            if(center.x <= (i.offset.left + i.width)
                                && center.x >= i.offset.left
                                && center.y <= (i.offset.top + i.height)
                                && center.y >= i.offset.top) {
                                    let _target = $(target.id).clone();
                                    let _uuid = uuid();
                                    _target.attr({ id: _uuid, }).attr('style', $(i.id).attr('style')).text(`drag2, id=${_uuid}`).css({ background: '#fff' });
                                    $('#plumb').append(_target);
                                    $(i.id).remove();
                                    this.ids.splice(this.ids.indexOf(i.id), 1, `#${_uuid}`);
                                    break;
                            }
                        }
                        this.currentId = null;
                    },
                });
*/
            });
        },
        created() {
            // axios.post('http://173.82.232.228:443/task', query).then(res => {
            //     console.log(res.data)
            // })
            // axios.get('http://173.82.232.228:443/result/545').then(res => {
            //     console.log(res)
            // })
            let id = '51710c31-485e-44bb-806f-9a8f6150cb72';
            axios.get(`http://173.82.232.228:443/result/${id}`).then(res => {
                setTimeout(() => {
                    this.drawChart(res.data.result);
                }, 1000)
            })
        }
    }
</script>

<style lang="less">
    .item {
      height: 80px;
      width: 80px;
      border: 2px solid blue;
      border-radius: 4px;
      position: absolute;
      font-size: 16px;
    }
</style>
